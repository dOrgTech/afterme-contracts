{
	"compiler": {
		"version": "0.8.24+commit.e11b9ed9"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_coFounderOnePrimary",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_coFounderOneSecondary",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_coFounderTwoPrimary",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_coFounderTwoSecondary",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_initialExecutor",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint8",
						"name": "coFounderId",
						"type": "uint8"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "newPrimary",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "newSecondary",
						"type": "address"
					}
				],
				"name": "CoFounderAddressesUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "newExecutor",
						"type": "address"
					}
				],
				"name": "ExecutorAddressUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "caller",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountForCoFounderOne",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountForCoFounderTwo",
						"type": "uint256"
					}
				],
				"name": "FeesWithdrawn",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "willAddress",
						"type": "address"
					}
				],
				"name": "WillCleared",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "willAddress",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "hasDiary",
						"type": "bool"
					}
				],
				"name": "WillCreated",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "basePlatformFee",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_user",
						"type": "address"
					}
				],
				"name": "clearWillRecord",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "coFounderOne",
				"outputs": [
					{
						"internalType": "address",
						"name": "primary",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "secondary",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "coFounderTwo",
				"outputs": [
					{
						"internalType": "address",
						"name": "primary",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "secondary",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "heirs",
						"type": "address[]"
					},
					{
						"internalType": "uint256[]",
						"name": "distribution",
						"type": "uint256[]"
					},
					{
						"internalType": "uint256",
						"name": "interval",
						"type": "uint256"
					},
					{
						"components": [
							{
								"internalType": "address",
								"name": "tokenContract",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}
						],
						"internalType": "struct Will.Erc20Distribution[]",
						"name": "erc20s",
						"type": "tuple[]"
					},
					{
						"components": [
							{
								"internalType": "address",
								"name": "tokenContract",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "tokenId",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "heir",
								"type": "address"
							}
						],
						"internalType": "struct Will.NftDistribution[]",
						"name": "nfts",
						"type": "tuple[]"
					},
					{
						"internalType": "bool",
						"name": "_hasDiary",
						"type": "bool"
					}
				],
				"name": "createWill",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "diaryPlatformFee",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "executorAddress",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_newFee",
						"type": "uint256"
					}
				],
				"name": "setDiaryPlatformFee",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_newExecutor",
						"type": "address"
					}
				],
				"name": "setExecutorAddress",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_newPrimary",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_newSecondary",
						"type": "address"
					}
				],
				"name": "updateCoFounderOneAddresses",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_newPrimary",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_newSecondary",
						"type": "address"
					}
				],
				"name": "updateCoFounderTwoAddresses",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "userWills",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "withdrawFees",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {},
			"title": "Source (Estate Planning Factory)",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"notice": "A factory contract for creating individual 'Will' contracts with co-founder governance.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"Source.sol": "Source"
		},
		"evmVersion": "shanghai",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb",
			"license": "MIT",
			"urls": [
				"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6",
				"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a"
			]
		},
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2",
			"license": "MIT",
			"urls": [
				"bzz-raw://5282825a626cfe924e504274b864a652b0023591fa66f06a067b25b51ba9b303",
				"dweb:/ipfs/QmeCfPykghhMc81VJTrHTC7sF6CRvaA1FXVq2pJhwYp1dV"
			]
		},
		"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
			"keccak256": "0xf78f05f3b8c9f75570e85300d7b4600d7f6f6a198449273f31d44c1641adb46f",
			"license": "MIT",
			"urls": [
				"bzz-raw://e28b872613b45e0e801d4995aa4380be2531147bfe2d85c1d6275f1de514fba3",
				"dweb:/ipfs/QmeeFcfShHYaS3BdgVj78nxR28ZaVUwbvr66ud8bT6kzw9"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
			"license": "MIT",
			"urls": [
				"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
				"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
			]
		},
		"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c",
			"license": "MIT",
			"urls": [
				"bzz-raw://971f954442df5c2ef5b5ebf1eb245d7105d9fbacc7386ee5c796df1d45b21617",
				"dweb:/ipfs/QmadRjHbkicwqwwh61raUEapaVEtaLMcYbQZWs9gUkgj3u"
			]
		},
		"Source.sol": {
			"keccak256": "0x42bdf0049099cd0bcb5d9e2a3abd10d94ab05d7421671b93343b43e8948f2864",
			"license": "MIT",
			"urls": [
				"bzz-raw://9a627fc84a88534d47410826155dee7941da7e8a0ac40703c192fa2fa4d9145d",
				"dweb:/ipfs/Qmb2dnJ3Dx8kinHRjV9iAfwCzBy1puSBaLsbEd9K4g6zPR"
			]
		},
		"Will.sol": {
			"keccak256": "0xac34152e0b9d207281ba0fe33cf75a9d3821d5e542934dfe1c4ca16a95141fa0",
			"license": "MIT",
			"urls": [
				"bzz-raw://a859a55bf1cbe215c0e4b0feb50e4e719a67a3c95c10764ddd91231fa728af75",
				"dweb:/ipfs/QmfJerDPnEm5B6ofgJJKBGwhD6CK6DYMozyYxJZnaJucsj"
			]
		}
	},
	"version": 1
}