{
	"compiler": {
		"version": "0.8.30+commit.73712a01"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_initialOwner",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "OwnableInvalidOwner",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "OwnableUnauthorizedAccount",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "willAddress",
						"type": "address"
					}
				],
				"name": "WillCleared",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "willAddress",
						"type": "address"
					}
				],
				"name": "WillCreated",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_user",
						"type": "address"
					}
				],
				"name": "clearWillRecord",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "heirs",
						"type": "address[]"
					},
					{
						"internalType": "uint256[]",
						"name": "distribution",
						"type": "uint256[]"
					},
					{
						"internalType": "uint256",
						"name": "interval",
						"type": "uint256"
					},
					{
						"components": [
							{
								"internalType": "address",
								"name": "tokenContract",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}
						],
						"internalType": "struct Source.Erc20Distribution[]",
						"name": "erc20s",
						"type": "tuple[]"
					},
					{
						"components": [
							{
								"internalType": "address",
								"name": "tokenContract",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "tokenId",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "heir",
								"type": "address"
							}
						],
						"internalType": "struct Source.NftDistribution[]",
						"name": "nfts",
						"type": "tuple[]"
					}
				],
				"name": "createWill",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "platformFee",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_newFee",
						"type": "uint256"
					}
				],
				"name": "setPlatformFee",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "userWills",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "withdrawFees",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		],
		"devdoc": {
			"details": "This contract should be owned by the dApp administrator. The user must approve this contract to spend their tokens (ERC20, ERC721) BEFORE calling createWill.",
			"errors": {
				"OwnableInvalidOwner(address)": [
					{
						"details": "The owner is not a valid owner account. (eg. `address(0)`)"
					}
				],
				"OwnableUnauthorizedAccount(address)": [
					{
						"details": "The caller account is not authorized to perform an operation."
					}
				]
			},
			"kind": "dev",
			"methods": {
				"clearWillRecord(address)": {
					"details": "This function should only be callable by a Will contract created by this factory.",
					"params": {
						"_user": "The owner of the will being cleared."
					}
				},
				"constructor": {
					"details": "Sets the initial owner and default platform fee.",
					"params": {
						"_initialOwner": "The address of the contract administrator."
					}
				},
				"createWill(address[],uint256[],uint256,(address,uint256)[],(address,uint256,address)[])": {
					"details": "The sender must send ETH equal to the will's value + the platformFee. The sender MUST approve this contract to manage the specified amounts of ERC20s and the specific NFTs before calling this function.",
					"params": {
						"distribution": "An array of percentages for fungible asset distribution.",
						"erc20s": "A list of ERC20 tokens and the total amount of each to include in the will.",
						"heirs": "An array of heir addresses for fungible asset distribution.",
						"interval": "The inactivity interval in seconds.",
						"nfts": "A list of specific NFTs to include in the will and their designated heirs."
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
				},
				"setPlatformFee(uint256)": {
					"params": {
						"_newFee": "The new fee in wei."
					}
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				}
			},
			"title": "Source (Estate Planning Factory)",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"clearWillRecord(address)": {
					"notice": "Allows a Will contract to clear its record from the factory upon cancellation."
				},
				"createWill(address[],uint256[],uint256,(address,uint256)[],(address,uint256,address)[])": {
					"notice": "Creates a new Will contract for the sender."
				},
				"platformFee()": {
					"notice": "The ETH fee charged by the platform to create a will."
				},
				"setPlatformFee(uint256)": {
					"notice": "Updates the platform fee required to create a will."
				},
				"userWills(address)": {
					"notice": "A mapping from a user's address to their created Will contract."
				},
				"withdrawFees()": {
					"notice": "Allows the owner to withdraw accumulated platform fees."
				}
			},
			"notice": "A factory contract for creating individual 'Will' contracts. It manages platform settings and fees.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"Source.sol": "Source"
		},
		"evmVersion": "prague",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb",
			"license": "MIT",
			"urls": [
				"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6",
				"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a"
			]
		},
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7",
			"license": "MIT",
			"urls": [
				"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db",
				"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9"
			]
		},
		"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
			"keccak256": "0x5dc63d1c6a12fe1b17793e1745877b2fcbe1964c3edfd0a482fac21ca8f18261",
			"license": "MIT",
			"urls": [
				"bzz-raw://6b7f97c5960a50fd1822cb298551ffc908e37b7893a68d6d08bce18a11cb0f11",
				"dweb:/ipfs/QmQQvxBytoY1eBt3pRQDmvH2hZ2yjhs12YqVfzGm7KSURq"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
			"license": "MIT",
			"urls": [
				"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
				"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
			]
		},
		"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8",
			"license": "MIT",
			"urls": [
				"bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621",
				"dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL"
			]
		},
		"Source.sol": {
			"keccak256": "0x71894e2778e283260c10f492e814a4b2fa885fec988e90f4ddb691cae9ecad05",
			"license": "MIT",
			"urls": [
				"bzz-raw://42af8a82f8a130f7a1ff87d242b657870c505c62201c9c02e53c30eed3272726",
				"dweb:/ipfs/QmTGkxvcbqhbpBrx9ThjJPAdYLX8QqR7nFo5ZvDHrWw4Vg"
			]
		},
		"Will.sol": {
			"keccak256": "0xfc1cb4916acefce334474d506685b3ffaafa8227f3c9ea73ab7d627dd73a49b9",
			"license": "MIT",
			"urls": [
				"bzz-raw://6a7020a4aa7ef06af19fa925535fafbe8b5564e10e6fd1ca08815bc52ef5fca5",
				"dweb:/ipfs/QmeRYMGe6YaSdPHNKF6gDZex3V4BSzFiXjkntWPQ4DLKa7"
			]
		}
	},
	"version": 1
}